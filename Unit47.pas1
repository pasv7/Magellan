unit Unit47;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Math, StdCtrls, ComCtrls, Buttons;

type
  TForm47 = class(TForm)
    Image2: TImage;
    PaintBox1: TPaintBox;
    PaintBox2: TPaintBox;
    GroupBox1: TGroupBox;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    StatusBar1: TStatusBar;
    PaintBox3: TPaintBox;
    Image1: TImage;
    TrackBar1: TTrackBar;
    Label1: TLabel;
    TrackBar2: TTrackBar;
    Label2: TLabel;
    BitBtn1: TBitBtn;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    BitBtn2: TBitBtn;
    Timer1: TTimer;
    procedure FormShow(Sender: TObject);
    procedure PaintBox1Paint(Sender: TObject);
    procedure PaintBox2Paint(Sender: TObject);
    procedure PaintBox3Paint(Sender: TObject);
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure RadioButton1Click(Sender: TObject);
    procedure RadioButton2Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure BitBtn2Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form47: TForm47;
  Hall: array of Double;
  Grad,DP: Double;
  BMPGlobal: TBitMap;
  Cl: integer=0;
  StX, StY, EnX, EnY: integer;
  Eg: array of Double;
  ImSiz,ImSizNew: integer;

implementation

uses Unit44,Unit1,Unit24, Unit48;

{$R *.dfm}

procedure TForm47.FormShow(Sender: TObject);
var i,j,A,t,k,R,G,B: Integer;
scX,scY,alpha2,alpha3: Double;  // Масштабные множители при переходе от координат к пиксельным координатам
PixA: array of array of integer;
H,Hrel: array of Double;
BMP: TBitMap;
label 0, 10;
begin
  Cl:=0;
  if Cl<>2 then BitBtn2.Enabled:=False;
  if Cl=2 then BitBtn2.Enabled:=True;
  if dial=true then begin
    //Сделаем отступ от краев по A
    A:=1;
    scX:=(Image1.Width-2*A)/stepcount[0];
    scY:=(Image1.Height-2*A)/stepcount[1];
    setlength(PixA,stepcount[0]*stepcount[1],2);
    t:=0;
    for i:=0 to Stepcount[0]-1 do begin
     for j:=0 to Stepcount[1]-1 do begin
      PixA[t,0]:=Round(A+scX*i);
      PixA[t,1]:=Round(A+scY*j);
      t:=t+1;
     end;
     end;
     //Теперь надо получить массив "высот", т.е. энергий, соответствующих этим пиксельным координатам
     SetLength(H,length(PixA));
     SetLength(Hrel,length(PixA));   //Относительные высоты (наименьшая принята 0)
    for i:=0 to length(energyscan)-1 do
    H[i]:=StrToFloat(energyscan[i]);
    for i:=0 to length(H)-1 do
    Hrel[i]:=(H[i]-MinValue(H))*23.06*27.2114;
    end
    else begin //////////////////Multiple out
     A:=1;
     scX:=(Image1.Width-2*A)/stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0];
     scY:=(Image1.Height-2*A)/stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1];
     setlength(PixA,stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]*stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1],2);
     t:=0;
     for i:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1 do begin
      for j:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1 do begin
       PixA[t,0]:=Round(A+scX*i);
       PixA[t,1]:=Round(A+scY*j);
       t:=t+1;
      end;
      end;
     //Теперь надо получить массив "высот", т.е. энергий, соответствующих этим пиксельным координатам
     SetLength(H,length(PixA));
     SetLength(Hrel,length(PixA));   //Относительные высоты (наименьшая принята 0)
     for i:=0 to length(energyscan_mult[basket[Form44.ComboBox1.ItemIndex]])-1 do
     if energyscan_mult[basket[Form44.ComboBox1.ItemIndex],i]<>'' then H[i]:=StrToFloat(energyscan_mult[basket[Form44.ComboBox1.ItemIndex],i]);
     for i:=0 to length(H)-1 do
     Hrel[i]:=(H[i]-MinValue(H))*23.06*27.2114;
     end;


    //Теперь вычисление высот во всех точках по экспоненциальной формуле
    SetLength(Hall,Image1.Width*Image1.Height); //У каждого пикселя должна быть своя высота
    alpha2:=Form47.TrackBar1.Position/10000;
    alpha3:=Form47.TrackBar2.Position/1000;
    t:=0;
    for i:=0 to Image1.Width-1 do begin
    for j:=0 to Image1.Height-1 do begin
    Hall[t]:=0;
    for k:=0 to length(Hrel)-1 do begin
    if Form47.Radiobutton1.Checked=true then Hall[t]:=Hall[t]+Hrel[k]*exp(-alpha2*(sqrt(sqr(i-PixA[k,0])+sqr(j-PixA[k,1]))));
    if Form47.Radiobutton2.Checked=true then Hall[t]:=Hall[t]+(Hrel[k] / power(sqrt(sqr(i-PixA[k,0])+sqr(j-PixA[k,1]))+1,alpha3));
    end;

    t:=t+1;
    end;
    end;

    //Теперь определяем максимальное и минимальное значение Hall и ставим
    //в соответствие определенные цвета, относительно которых будет расчитыявать
    //промежуточные цвета
    //Максимальное значение - красно-коричневый
    //Минимальное значение - сине-зеленое
    //Градация : Коричнево-красный, темно-красный, красный, оранжевокрасный, оранжевый, желтооранжевый,
    //желтый, желто-зеленый, лайм, зеленый, зелено-синий, синий, насыщенно темно-синий
    // ------------------------------------------------------------------------------------->
    // высота падает
    //Всего 1024 цветовых переходов
    //Делим разницу между максимумом и минимумом и находим порог тонкости перехода
    //Полагаем, что цвет будет меняться линейно, т.е. оттенки переходить пропорционально
    //изменению энергии (хотя могут быть и иные варианты) - логарифмически (например)
    Grad:=(MaxValue(Hall)-MinValue(Hall))/1024;
    DP:=(MaxValue(Hall)-MinValue(Hall))/4;
    k:=0;
    BMP:=TBitMap.Create;
    BMP.Pixelformat:=pf24bit;
    BMP.Width:=Image1.Width;
    BMP.Height:=Image1.Height;




  for i:=0 to Image1.Width-1 do   begin
  for j:=0 to Image1.Height-1 do  begin

   
   if Hall[k]>=3*DP then begin
    R:=255;
    G:=255-Round((Hall[k]-3*DP)/Grad);
    B:=0;
    goto 10;
   end;
   if (Hall[k]>=2*DP) and (Hall[k]<3*DP) then begin
    R:=255-Round((3*DP-Hall[k])/Grad);
    G:=255;
    B:=0;
    goto 10;
   end;
   if (Hall[k]>=1*DP) and (Hall[k]<2*DP) then begin
    R:=0;
    G:=255;
    B:=255-Round((Hall[k]-DP)/Grad);
    goto 10;
   end;
   if Hall[k]<DP  then begin
    R:=0;
    G:=Round(Hall[k]/Grad);
    B:=255;
   end;

   10:
   if R>255 then R:=255;
   if G>255 then G:=255;
   if B>255 then B:=255;
   if R<0 then R:=0;
   if G<0 then G:=0;
   if B<0 then B:=0;




   BMP.Canvas.Pixels[i,j]:=RGB(R,G,B);
   k:=k+1;
   end;
   end;

   Image1.Picture.Assign(BMP);
   BMP.Free;
   ImSiz:=Image1.Width;
    0:
end;

procedure TForm47.PaintBox1Paint(Sender: TObject);
var i: integer;
a: string;
begin
PaintBox1.Canvas.Pen.Width:=2;
PaintBox1.Canvas.MoveTo((Image1.Left-PaintBox1.Left),0);
PaintBox1.Canvas.LineTo(Image1.Width+(Image1.Left-PaintBox1.Left),0);
PaintBox1.Canvas.Pen.Width:=1;

if dial=true then begin
for i:=0 to stepcount[0]-1 do  begin
PaintBox1.Canvas.MoveTo((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount[0]-1))*i),0);
PaintBox1.Canvas.LineTo((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount[0]-1))*i),5);
a:=FloatToStr(initialval[0]+i*stepsize[0]);
PaintBox1.Canvas.Font.Size:=8;
PaintBox1.Canvas.TextOut((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount[0]-1))*i)-Round(PaintBox1.Canvas.TextWidth(a)/2),6,a);
end;
end
else begin
for i:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1 do  begin
PaintBox1.Canvas.MoveTo((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1))*i),0);
PaintBox1.Canvas.LineTo((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1))*i),5);
a:=FloatToStr(initialval_mult[basket[Form44.ComboBox1.ItemIndex],0]+i*stepsize_mult[basket[Form44.ComboBox1.ItemIndex],0]);
PaintBox1.Canvas.Font.Size:=8;
PaintBox1.Canvas.TextOut((Image1.Left-PaintBox1.Left)+Round((Image1.Width/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1))*i)-Round(PaintBox1.Canvas.TextWidth(a)/2),6,a);
end;


end;




end;

procedure TForm47.PaintBox2Paint(Sender: TObject);
var i: integer;
a: string;
begin
PaintBox2.Canvas.Pen.Width:=2;
PaintBox2.Canvas.MoveTo(PaintBox2.Width,(Image1.Top-PaintBox2.Top));
PaintBox2.Canvas.LineTo(PaintBox2.Width,Image1.Height+(Image1.Top-PaintBox2.Top));
PaintBox2.Canvas.Pen.Width:=1;

if dial=true then begin
for i:=0 to stepcount[1]-1 do  begin
PaintBox2.Canvas.MoveTo(PaintBox2.Width,(Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount[1]-1))*i));
PaintBox2.Canvas.LineTo(PaintBox2.Width-5,(Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount[1]-1))*i));
a:=FloatToStr(initialval[1]+i*stepsize[1]);
PaintBox2.Canvas.Font.Size:=8;
PaintBox2.Canvas.TextOut(PaintBox2.Width-6-Round(PaintBox2.Canvas.TextWidth(a)), (Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount[1]-1))*i)-Round(PaintBox2.Canvas.TextHeight(a)/2),a);
end;
end
else begin
for i:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1 do  begin
PaintBox2.Canvas.MoveTo(PaintBox2.Width,(Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1))*i));
PaintBox2.Canvas.LineTo(PaintBox2.Width-5,(Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1))*i));
a:=FloatToStr(initialval_mult[basket[Form44.ComboBox1.ItemIndex],1]+i*stepsize_mult[basket[Form44.ComboBox1.ItemIndex],1]);
PaintBox2.Canvas.Font.Size:=8;
PaintBox2.Canvas.TextOut(PaintBox2.Width-6-Round(PaintBox2.Canvas.TextWidth(a)), (Image1.Top-PaintBox2.Top)+Round((Image1.Height/(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1))*i)-Round(PaintBox2.Canvas.TextHeight(a)/2),a);
end;
end;

end;








procedure TForm47.PaintBox3Paint(Sender: TObject);
var i: integer;
a: string;
begin
PaintBox3.Canvas.Pen.Width:=2;
PaintBox3.Canvas.MoveTo(0,(Image2.Top-PaintBox3.Top));
PaintBox3.Canvas.LineTo(0,Image2.Height+(Image2.Top-PaintBox3.Top));
PaintBox3.Canvas.Pen.Width:=1;
for i:=0 to 4 do  begin
PaintBox3.Canvas.MoveTo(0,(Image2.Top-PaintBox3.Top)+Round(i*(Image2.Height/4)));
PaintBox3.Canvas.LineTo(5,(Image2.Top-PaintBox3.Top)+Round(i*(Image2.Height/4)));
PaintBox3.Canvas.Font.Size:=8;
a:=FloatToStrF((MaxValue(en_for_st)-MinValue(en_for_st) -  i*(((MaxValue(en_for_st)-MinValue(en_for_st))/4)))*23.06*27.2116,ffFixed,10,3);
PaintBox3.Canvas.TextOut(6,(Image2.Top-PaintBox3.Top)+Round(i*(Image2.Height/4))-Round(PaintBox3.Canvas.TextHeight(a)/2),a);

end;

end;

procedure TForm47.Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
  var r,g,b: cardinal;
  H,E: double;
begin
  r:=GETRVALUE(Image1.Canvas.Pixels[x,y]);
  g:=GETGVALUE(Image1.Canvas.Pixels[x,y]);
  b:=GETBVALUE(Image1.Canvas.Pixels[x,y]);
  if (r=255) and (b=0) then H:=4*DP-g*Grad;
  if (g=255) and (b=0) then H:=2*DP+r*Grad;
  if (r=0) and (g=255) then H:=2*DP-b*Grad;
  if (r=0) and (b=255) then H:=g*Grad;
  E:= (H/MaxValue(Hall)) * (MaxValue(en_for_st)-MinValue(en_for_st))*27.2116*23.06;

  if dial=true then
   StatusBar1.Panels[0].Text:= 'Coord.1 = '+ FloatToStrF( (initialval[0]+  x*(initialval[0]+(stepcount[0]-1)*stepsize[0]-initialval[0])/Image1.Width),ffFixed,8,3)+' ;   Coord.2 = '
   + FloatToStrF( (initialval[1]+  y*(initialval[1]+(stepcount[1]-1)*stepsize[1]-initialval[1])/Image1.Height),ffFixed,8,3) + ' ;   E = ' +FloatToStrF(E,ffFixed,8,3)
  else
   StatusBar1.Panels[0].Text:= 'Coord.1 = '+ FloatToStrF( (initialval_mult[basket[Form44.ComboBox1.ItemIndex],0]+  x*(initialval_mult[basket[Form44.ComboBox1.ItemIndex],0]+(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1)*stepsize_mult[basket[Form44.ComboBox1.ItemIndex],0]-initialval_mult[basket[Form44.ComboBox1.ItemIndex],0])/Image1.Width),ffFixed,8,3)+' ;   Coord.2 = '
   + FloatToStrF( (initialval_mult[basket[Form44.ComboBox1.ItemIndex],1]+  y*(initialval_mult[basket[Form44.ComboBox1.ItemIndex],1]+(stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1)*stepsize_mult[basket[Form44.ComboBox1.ItemIndex],1]-initialval_mult[basket[Form44.ComboBox1.ItemIndex],1])/Image1.Height),ffFixed,8,3) + ' ;   E = ' +FloatToStrF(E,ffFixed,8,3) ;

end;





procedure TForm47.FormCreate(Sender: TObject);
begin
if RadioButton1.Checked=True then begin
TrackBar1.Enabled:=True;
TrackBar2.Enabled:=False;
end;
if RadioButton2.Checked=True then begin
TrackBar1.Enabled:=False;
TrackBar2.Enabled:=True;
end;


end;

procedure TForm47.RadioButton1Click(Sender: TObject);
begin
if RadioButton1.Checked=True then begin
TrackBar1.Enabled:=True;
TrackBar2.Enabled:=False;
end;
if RadioButton2.Checked=True then begin
TrackBar1.Enabled:=False;
TrackBar2.Enabled:=True;
end;
end;

procedure TForm47.RadioButton2Click(Sender: TObject);
begin
if RadioButton1.Checked=True then begin
TrackBar1.Enabled:=True;
TrackBar2.Enabled:=False;
end;
if RadioButton2.Checked=True then begin
TrackBar1.Enabled:=False;
TrackBar2.Enabled:=True;
end;
end;

procedure TForm47.BitBtn1Click(Sender: TObject);
var i,j,A,t,k,R,G,B: Integer;
scX,scY,alpha2,alpha3: Double;  // Масштабные множители при переходе от координат к пиксельным координатам
PixA: array of array of integer;
H,Hrel: array of Double;
BMP: TBitMap;
label 0, 10;
begin
  Cl:=0;
  ImSiz:=ImSizNew;
  Image1.Picture:=nil;
  if dial=true then begin
    //Сделаем отступ от краев по A
    A:=1;
    scX:=(Image1.Width-2*A)/stepcount[0];
    scY:=(Image1.Height-2*A)/stepcount[1];
    setlength(PixA,stepcount[0]*stepcount[1],2);
    t:=0;
    for i:=0 to Stepcount[0]-1 do begin
     for j:=0 to Stepcount[1]-1 do begin
      PixA[t,0]:=Round(A+scX*i);
      PixA[t,1]:=Round(A+scY*j);
      t:=t+1;
     end;
     end;
     //Теперь надо получить массив "высот", т.е. энергий, соответствующих этим пиксельным координатам
     SetLength(H,length(PixA));
     SetLength(Hrel,length(PixA));   //Относительные высоты (наименьшая принята 0)
    for i:=0 to length(energyscan)-1 do
    H[i]:=StrToFloat(energyscan[i]);
    for i:=0 to length(H)-1 do
    Hrel[i]:=(H[i]-MinValue(H))*23.06*27.2116;
    end
    else begin //////////////////Multiple out
     A:=1;
     scX:=(Image1.Width-2*A)/stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0];
     scY:=(Image1.Height-2*A)/stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1];
     setlength(PixA,stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]*stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1],2);
     t:=0;
     for i:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],0]-1 do begin
      for j:=0 to stepcount_mult[basket[Form44.ComboBox1.ItemIndex],1]-1 do begin
       PixA[t,0]:=Round(A+scX*i);
       PixA[t,1]:=Round(A+scY*j);
       t:=t+1;
      end;
      end;
     //Теперь надо получить массив "высот", т.е. энергий, соответствующих этим пиксельным координатам
     SetLength(H,length(PixA));
     SetLength(Hrel,length(PixA));   //Относительные высоты (наименьшая принята 0)
     for i:=0 to length(energyscan_mult[basket[Form44.ComboBox1.ItemIndex]])-1 do
     if energyscan_mult[basket[Form44.ComboBox1.ItemIndex],i]<>'' then H[i]:=StrToFloat(energyscan_mult[basket[Form44.ComboBox1.ItemIndex],i]);
     for i:=0 to length(H)-1 do
     Hrel[i]:=(H[i]-MinValue(H))*23.06*27.2116;
     end;


    //Теперь вычисление высот во всех точках по экспоненциальной формуле
    SetLength(Hall,Image1.Width*Image1.Height); //У каждого пикселя должна быть своя высота
    alpha2:=Form47.TrackBar1.Position/10000;
    alpha3:=Form47.TrackBar2.Position/1000;
    t:=0;
    for i:=0 to Image1.Width-1 do begin
    for j:=0 to Image1.Height-1 do begin
    Hall[t]:=0;
    for k:=0 to length(Hrel)-1 do begin
    if Form47.Radiobutton1.Checked=true then Hall[t]:=Hall[t]+Hrel[k]*exp(-alpha2*(sqrt(sqr(i-PixA[k,0])+sqr(j-PixA[k,1]))));
    if Form47.Radiobutton2.Checked=true then Hall[t]:=Hall[t]+(Hrel[k] / power(sqrt(sqr(i-PixA[k,0])+sqr(j-PixA[k,1]))+1,alpha3));
    end;

    t:=t+1;
    end;
    end;

    //Теперь определяем максимальное и минимальное значение Hall и ставим
    //в соответствие определенные цвета, относительно которых будет расчитыявать
    //промежуточные цвета
    //Максимальное значение - красно-коричневый
    //Минимальное значение - сине-зеленое
    //Градация : Коричнево-красный, темно-красный, красный, оранжевокрасный, оранжевый, желтооранжевый,
    //желтый, желто-зеленый, лайм, зеленый, зелено-синий, синий, насыщенно темно-синий
    // ------------------------------------------------------------------------------------->
    // высота падает
    //Всего 1024 цветовых переходов
    //Делим разницу между максимумом и минимумом и находим порог тонкости перехода
    //Полагаем, что цвет будет меняться линейно, т.е. оттенки переходить пропорционально
    //изменению энергии (хотя могут быть и иные варианты) - логарифмически (например)
    Grad:=(MaxValue(Hall)-MinValue(Hall))/1024;
    DP:=(MaxValue(Hall)-MinValue(Hall))/4;
    k:=0;
    BMP:=TBitMap.Create;
    BMP.Pixelformat:=pf24bit;
    BMP.Width:=Image1.Width;
    BMP.Height:=Image1.Height;




  for i:=0 to Image1.Width-1 do   begin
  for j:=0 to Image1.Height-1 do  begin

   
   if Hall[k]>=3*DP then begin
    R:=255;
    G:=255-Round((Hall[k]-3*DP)/Grad);
    B:=0;
    goto 10;
   end;
   if (Hall[k]>=2*DP) and (Hall[k]<3*DP) then begin
    R:=255-Round((3*DP-Hall[k])/Grad);
    G:=255;
    B:=0;
    goto 10;
   end;
   if (Hall[k]>=1*DP) and (Hall[k]<2*DP) then begin
    R:=0;
    G:=255;
    B:=255-Round((Hall[k]-DP)/Grad);
    goto 10;
   end;
   if Hall[k]<DP  then begin
    R:=0;
    G:=Round(Hall[k]/Grad);
    B:=255;
   end;

   10:
   if R>255 then R:=255;
   if G>255 then G:=255;
   if B>255 then B:=255;
   if R<0 then R:=0;
   if G<0 then G:=0;
   if B<0 then B:=0;




   BMP.Canvas.Pixels[i,j]:=RGB(R,G,B);
   k:=k+1;
   end;
   end;

   Image1.Picture.Assign(BMP);
   BMP.Free;

    0:
end;

procedure TForm47.FormResize(Sender: TObject);
begin

Image1.Width:=Image1.Height;
Image1.Height:=Form47.Height-99-10;
PaintBox1.Top:=Form47.Height-87-10;
PaintBox2.Height:=Form47.Height-80-10;
PaintBox1.Width:=Image1.Width+4+Round(PaintBox2.Width/2)+30;
Image2.Height:=Image1.Height;
Image2.Left:=Image1.Left+Image1.Width+5;
PaintBox3.Left:=Image2.Left+Image2.Width+2;
PaintBox3.Height:=Form47.Height-83-10;
GroupBox1.Left:=PaintBox3.Left+PaintBox3.Width+7;
TrackBar1.Left:=PaintBox3.Left+82;
TrackBar2.Left:=PaintBox3.Left+166;
TrackBar1.Height:=Form47.Height-261-10;
TrackBar2.Height:=TrackBar1.Height;
BitBtn1.Left:=PaintBox3.Left+78-35;
BitBtn1.Top:=Form47.Height-116-10;
BitBtn2.Left:=BitBtn1.Left+BitBtn1.Width+3;
BitBtn2.Top:=BitBtn1.Top;
Label1.Left:=PaintBox3.Left+PaintBox3.Width+7;
Label2.Left:=PaintBox3.Left+PaintBox3.Width+91;
Label3.Left:=PaintBox3.Left+PaintBox3.Width+1;
Label4.Left:=PaintBox3.Left+PaintBox3.Width+15;
Label5.Left:=PaintBox3.Left+PaintBox3.Width+91;
Label6.Left:=PaintBox3.Left+PaintBox3.Width+98;
Label4.Top:=Form47.Height-141-10;
Label6.Top:=Label4.Top;
 ImSizNew:=Image1.Width;
end;

procedure TForm47.Image1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
  var k,a,H: real;
  i: integer;
  Px,Py: array of integer;
  r,g,b: cardinal;
  label 0;
begin
  if Cl>=2 then begin
  Cl:=0;
  BitBtn2.Enabled:=False;
  end;
Cl:=Cl+1;
if Cl=1 then
begin
StX:=X;
StY:=Y;
end;
if Cl=2 then begin
EnX:=X;
EnY:=Y;
end;



if Cl=2 then begin
    If ImSiz<>ImSizNew then begin
    showmessage('После изменения размеров окна необходимо обновить изображение!');
    goto 0;
  end;
  Eg:=nil;
BitBtn2.Enabled:=True;
if StX-EnX<>0 then k:=(StY-EnY)/(StX-EnX);
a:=StY-k*StX;

if (StX-EnX<>0) and (k<=1) then begin
  setlength(Py,abs(StX-EnX)+1);

  if StX<EnX then begin
   for i:=StX to EnX do
   Py[i-StX]:=Round(k*i+a);
  end
  else begin
   for i:=EnX to StX do
   Py[i-EnX]:=Round(k*i+a);
  end;
end;
//иначе Х становится У, а У - иксом
if (StY-EnY)<>0 then k:=(StX-EnX)/(StY-EnY);
a:=StX-k*StY;
if (StY-EnY<>0) and (k<1) then begin
  setlength(Px,abs(StY-EnY)+1);

  if StY<EnY then begin
  for i:=StY to EnY do
  Px[i-StY]:=Round(k*i+a);
 end
 else begin
  for i:=EnY to StY do
  Px[i-EnY]:=Round(k*i+a)
 end;

end;


if Py<>nil then begin
  setlength(Eg,length(Py));
  for i:=0 to length(Py)-1 do begin

  if StX<EnX then begin;
   r:=GETRVALUE(Image1.Canvas.Pixels[StX+i,Py[i]]);
   g:=GETGVALUE(Image1.Canvas.Pixels[StX+i,Py[i]]);
   b:=GETBVALUE(Image1.Canvas.Pixels[StX+i,Py[i]]);
  end
  else begin
   r:=GETRVALUE(Image1.Canvas.Pixels[StX-i,Py[i]]);
   g:=GETGVALUE(Image1.Canvas.Pixels[StX-i,Py[i]]);
   b:=GETBVALUE(Image1.Canvas.Pixels[StX-i,Py[i]]);
  end;
  if (r=255) and (b=0) then H:=4*DP-g*Grad;
  if (g=255) and (b=0) then H:=2*DP+r*Grad;
  if (r=0) and (g=255) then H:=2*DP-b*Grad;
  if (r=0) and (b=255) then H:=g*Grad;
  Eg[i]:= (H/MaxValue(Hall)) * (MaxValue(en_for_st)-MinValue(en_for_st))*27.2116*23.06;
 end;
end;

if Px<>nil then begin
  setlength(Eg,length(Px));
  for i:=0 to length(Px)-1 do begin

  if StY<EnY then begin
   r:=GETRVALUE(Image1.Canvas.Pixels[Px[i],StY+i]);
   g:=GETGVALUE(Image1.Canvas.Pixels[Px[i],StY+i]);
   b:=GETBVALUE(Image1.Canvas.Pixels[Px[i],StY+i]);
  end
  else begin
   r:=GETRVALUE(Image1.Canvas.Pixels[Px[i],StY-i]);
   g:=GETGVALUE(Image1.Canvas.Pixels[Px[i],StY-i]);
   b:=GETBVALUE(Image1.Canvas.Pixels[Px[i],StY-i]);
  end;

  if (r=255) and (b=0) then H:=4*DP-g*Grad;
  if (g=255) and (b=0) then H:=2*DP+r*Grad;
  if (r=0) and (g=255) then H:=2*DP-b*Grad;
  if (r=0) and (b=255) then H:=g*Grad;
  Eg[i]:= (H/MaxValue(Hall)) * (MaxValue(en_for_st)-MinValue(en_for_st))*27.2116*23.06;
 end;
end;



Image1.Canvas.MoveTo(StX,StY);
Image1.Canvas.LineTo(EnX,EnY);
end;

 0:
end;

procedure TForm47.BitBtn2Click(Sender: TObject);
label 0;
begin
  If ImSiz<>ImSizNew then begin
    showmessage('После изменения размеров окна необходимо обновить изображение!');
    goto 0;
  end;

Form48.Show;
0:
end;

procedure TForm47.Timer1Timer(Sender: TObject);
begin
 if ImSiz=ImSizNew then Form47.StatusBar1.Panels[1].Text:='Изображение актуально'
 else Form47.StatusBar1.Panels[1].Text:='Изображение необходимо обновить!';
end;

end.
